# NUMBERS = 1 2 3 4 5 6 7
NUMBERS = 1 2 
LECTURES = $(foreach num, $(NUMBERS), lecture-$(num)-slides)
HANDOUTS = $(foreach num, $(NUMBERS), lecture-$(num)-handout)

LATEST_TAG=$(shell git describe --abbrev=0 --tags)
LATEST_TAG_DATE=$(shell git log -n 1 $(LATEST_TAG) --pretty=format:"%cd" --date=format:"%B %e, %Y")
REVISION=$(shell git describe --tags HEAD)
REVISION_DATE=$(shell git log -n 1 $(REVISION) --pretty=format:"%cd" --date=format:"%B %e, %Y")
REVISION_FILE=lectures.revision.tex

PRESENTATION_FILE = lectures.slides.tex
ARTICLE_FILE = lectures.notes.tex
LECTURES_DIRECTORY = lectures

CLEAN_EXTS = *.log *.aux *.nav *.fls *.fdb_latexmk *.snm *.toc *.vrb *.out *.synctex.gz *.pyg *.xdv

LATEXMK_OPTS = -xelatex -interaction=batchmode -synctex=1 -file-line-error

TEXINPUTS=.;../pkgs;

MAKEFLAGS += --silent

all: clean-pdf slides handouts

# Rules to make the separate lectures, e.g. 'make 1'
$(foreach i, $(NUMBERS), $(eval $(i): lecture-$(i)-slides lecture-$(i)-handout))

lecture-%-slides: lectures.slides.tex $(LECTURES_DIRECTORY)/lecture-%.tex
	set TEXINPUTS=$(TEXINPUTS)&& latexmk $(LATEXMK_OPTS) -usepretex="\def\theLecture{$*}" -jobname=lecture-$*-slides $(PRESENTATION_FILE)

lectures-slides: revision-file lectures.slides.tex
	set TEXINPUTS=$(TEXINPUTS)&& latexmk $(LATEXMK_OPTS) -jobname=lectures-slides $(PRESENTATION_FILE)

lecture-%-handout: lectures.slides.tex $(LECTURES_DIRECTORY)/lecture-%.tex
	set TEXINPUTS=$(TEXINPUTS)&& latexmk $(LATEXMK_OPTS) -usepretex="\def\theLecture{$*}\PassOptionsToClass{handout}{beamer}" -jobname=lecture-$*-handout $(PRESENTATION_FILE)

lectures-handout: revision-file lectures.slides.tex
	set TEXINPUTS=$(TEXINPUTS)&& latexmk $(LATEXMK_OPTS) -usepretex="\PassOptionsToClass{handout}{beamer}" -jobname=lectures-handout $(PRESENTATION_FILE)

lectures-notes: lectures.notes.tex $(LECTURES_DIRECTORY)/lecture-*.tex
	set TEXINPUTS=$(TEXINPUTS)&& latexmk $(LATEXMK_OPTS) -jobname=lectures-notes $(ARTICLE_FILE)

slides: lectures-slides $(LECTURES)
handouts: lectures-handout $(HANDOUTS)

revision-file:
	echo %% This file is automatically generated based on git information>$(REVISION_FILE)
	echo %% Use 'make revision-file' to re-generate>>$(REVISION_FILE)
	echo \begingroup>>$(REVISION_FILE)
	echo \catcode`\-=12>>$(REVISION_FILE)
	echo \catcode`\/=12>>$(REVISION_FILE)
	echo \catcode`\.=12>>$(REVISION_FILE)
	echo \catcode`\:=12>>$(REVISION_FILE)
	echo \catcode`\+=12>>$(REVISION_FILE)
	echo \catcode`\-=12>>$(REVISION_FILE)
	echo \gdef\lecturesversion{$(LATEST_TAG)}>>$(REVISION_FILE)
	echo \gdef\lecturesrevision{$(REVISION)}>>$(REVISION_FILE)
	echo \gdef\lecturesversiondate{$(LATEST_TAG_DATE)}>>$(REVISION_FILE)
	echo \gdef\lecturesrevisiondate{$(REVISION_DATE)}>>$(REVISION_FILE)
	echo \endgroup>>$(REVISION_FILE)

clean:
ifeq ($(OS), Windows_NT)
	del /s /q $(CLEAN_EXTS)
	- for /f %%i in ('dir /a:d /s /b _minted*') do rmdir /s /q %%i
else
	rm -r -f $(CLEAN_EXTS)
	rm -r -f _minted*
endif

clean-pdf: clean
ifeq ($(OS), Windows_NT)
	del /q lecture*.pdf
else
	rm -f lecture*.pdf
endif